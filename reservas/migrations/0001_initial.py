# Generated by Django 4.2.20 on 2025-05-09 00:17

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Usuario',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('username', models.CharField(error_messages={'unique': 'Ya existe una cuenta con este nombre de usuario.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('email', models.EmailField(error_messages={'unique': 'Ya existe una cuenta con este e-mail.'}, max_length=254, unique=True, verbose_name='email address')),
                ('last_verification_sent', models.DateTimeField(blank=True, help_text='Última vez que se envió un email de verificación.', null=True)),
                ('last_password_reset_sent', models.DateTimeField(blank=True, help_text='Última vez que se envió un email de recuperación de contraseña.', null=True)),
                ('perfil_privado', models.BooleanField(default=False, help_text='Si está activado, solo tus amigos pueden ver tu perfil.')),
                ('rol', models.CharField(choices=[('alumno', 'Alumno'), ('profesor', 'Profesor'), ('organizador', 'Organizador')], default='alumno', max_length=20)),
                ('genero', models.CharField(choices=[('hombre', 'Hombre'), ('mujer', 'Mujer'), ('otro', 'Otro')], default='hombre', max_length=10)),
                ('fecha_nacimiento', models.DateField(blank=True, null=True)),
                ('telefono', models.CharField(blank=True, max_length=20)),
                ('localidad', models.CharField(blank=True, max_length=100)),
                ('municipio', models.CharField(blank=True, max_length=100)),
                ('onboarding_completado', models.BooleanField(default=False)),
                ('foto_perfil', models.ImageField(blank=True, help_text='Foto de perfil del usuario.', null=True, upload_to='fotos_perfil/', validators=[django.core.validators.FileExtensionValidator(['jpg', 'jpeg', 'png', 'webp'])])),
                ('is_active', models.BooleanField(default=False, help_text='El usuario debe activar su cuenta vía email.')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='AlumnoPerfil',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nivel', models.FloatField(default=0.0)),
                ('mano_dominante', models.CharField(default='Derecha', max_length=20)),
                ('posicion', models.CharField(default='Reves', max_length=20)),
                ('fondo_pared', models.IntegerField(default=0)),
                ('pared_fondo', models.IntegerField(default=0)),
                ('pared', models.IntegerField(default=0)),
                ('pared_lateral', models.IntegerField(default=0)),
                ('resistencia', models.IntegerField(default=0)),
                ('agilidad', models.IntegerField(default=0)),
                ('coordinacion', models.IntegerField(default=0)),
                ('tecnica', models.IntegerField(default=0)),
                ('potencia', models.IntegerField(default=0)),
                ('velocidad', models.IntegerField(default=0)),
                ('defensa', models.IntegerField(default=0)),
                ('ataque', models.IntegerField(default=0)),
                ('globo', models.IntegerField(default=0)),
                ('volea_natural', models.IntegerField(default=0)),
                ('volea_reves', models.IntegerField(default=0)),
                ('bandeja', models.IntegerField(default=0)),
                ('vibora', models.IntegerField(default=0)),
                ('remate', models.IntegerField(default=0)),
                ('rulo', models.IntegerField(default=0)),
                ('liftado', models.IntegerField(default=0)),
                ('cortado', models.IntegerField(default=0)),
                ('cambio_agarre', models.IntegerField(default=0)),
                ('bote_pronto', models.IntegerField(default=0)),
                ('x3', models.IntegerField(default=0)),
                ('x4', models.IntegerField(default=0)),
                ('dejada', models.IntegerField(default=0)),
                ('chiquita', models.IntegerField(default=0)),
                ('contrapared', models.IntegerField(default=0)),
                ('contralateral', models.IntegerField(default=0)),
                ('tactica', models.IntegerField(default=0, verbose_name='Táctica (General)')),
                ('anticipacion', models.IntegerField(default=0, verbose_name='Anticipación')),
                ('vision_juego', models.IntegerField(default=0, verbose_name='Visión de Juego')),
                ('decisiones', models.IntegerField(default=0, verbose_name='Toma de Decisiones')),
                ('concentracion', models.IntegerField(default=0, verbose_name='Concentración')),
                ('serenidad', models.IntegerField(default=0, verbose_name='Serenidad')),
                ('trabajo_equipo', models.IntegerField(default=0, verbose_name='Trabajo en Equipo')),
                ('esfuerzo', models.IntegerField(default=0, verbose_name='Esfuerzo')),
                ('regularidad', models.IntegerField(default=0, verbose_name='Regularidad')),
                ('competitividad', models.IntegerField(default=0, verbose_name='Competitividad')),
                ('gestion_error', models.IntegerField(default=0, verbose_name='Gestión del Error')),
                ('comunicacion', models.IntegerField(default=0, verbose_name='Comunicación')),
            ],
        ),
        migrations.CreateModel(
            name='Caracteristica',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nombre', models.CharField(max_length=100, unique=True)),
            ],
        ),
        migrations.CreateModel(
            name='CategoriaReview',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nombre', models.CharField(max_length=50)),
            ],
        ),
        migrations.CreateModel(
            name='Clase',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('fecha', models.DateTimeField()),
                ('descripcion', models.TextField(blank=True, null=True)),
                ('profesor', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='clases_dadas', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Club',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nombre', models.CharField(max_length=100)),
                ('slug', models.SlugField(blank=True, unique=True)),
                ('descripcion', models.TextField(blank=True)),
                ('descripcion_corta', models.CharField(blank=True, max_length=160)),
                ('direccion', models.CharField(max_length=255)),
                ('latitud', models.FloatField()),
                ('longitud', models.FloatField()),
                ('telefono', models.CharField(blank=True, max_length=20)),
                ('email', models.EmailField(blank=True, max_length=254)),
                ('web', models.URLField(blank=True)),
                ('url_whatsapp', models.URLField(blank=True)),
                ('url_instagram', models.URLField(blank=True)),
                ('logo', models.ImageField(blank=True, null=True, upload_to='clubes/logos/')),
                ('video_presentacion', models.URLField(blank=True)),
                ('video_instalaciones', models.URLField(blank=True)),
                ('seo_keywords', models.CharField(blank=True, max_length=255)),
                ('carnet_socio', models.BooleanField(default=False)),
                ('permite_reservas_online', models.BooleanField(default=False)),
                ('sistema_reservas_externo', models.URLField(blank=True)),
                ('requiere_reserva_previa', models.BooleanField(default=False)),
                ('ranking_publico', models.BooleanField(default=True)),
                ('acceso_24h', models.BooleanField(default=False)),
                ('pet_friendly', models.BooleanField(default=False)),
                ('tiene_parking', models.BooleanField(default=False)),
                ('transporte_publico_cercano', models.BooleanField(default=False)),
                ('precio_medio_hora', models.DecimalField(blank=True, decimal_places=2, max_digits=6, null=True)),
                ('ocupacion_promedio', models.IntegerField(blank=True, null=True)),
                ('aforo_maximo', models.PositiveIntegerField(blank=True, null=True)),
                ('anio_fundacion', models.IntegerField(blank=True, null=True)),
                ('tipo_ambiente', models.CharField(choices=[('familiar', 'Familiar'), ('competitivo', 'Competitivo'), ('mixto', 'Mixto')], default='mixto', max_length=20)),
                ('nivel_medio_jugadores', models.CharField(blank=True, choices=[('bajo', 'Bajo'), ('medio', 'Medio'), ('alto', 'Alto')], max_length=20)),
                ('permite_pozos', models.BooleanField(default=False, help_text='Permite organizar partidos tipo pozo')),
                ('permite_ligas', models.BooleanField(default=False, help_text='Permite organizar ligas internas o abiertas')),
                ('permite_eventos_empresariales', models.BooleanField(default=False, help_text='Permite festividades o eventos privados organizados por empresas o comunidades')),
                ('plan', models.CharField(choices=[('basico', 'Básico'), ('premium', 'Premium')], default='basico', max_length=20)),
                ('contacto_gestor', models.CharField(blank=True, max_length=100)),
                ('contacto_gestor_email', models.EmailField(blank=True, max_length=254)),
                ('contacto_gestor_telefono', models.CharField(blank=True, max_length=20)),
                ('destacado', models.BooleanField(default=False)),
                ('activo', models.BooleanField(default=True)),
                ('publicado', models.BooleanField(default=False)),
                ('ofrece_escuela', models.BooleanField(default=False)),
                ('organiza_torneos', models.BooleanField(default=False)),
                ('alquila_material', models.BooleanField(default=False)),
                ('ofrece_fisioterapia', models.BooleanField(default=False)),
                ('barbacoa_disponible', models.BooleanField(default=False)),
                ('area_social', models.BooleanField(default=False)),
                ('zona_refrigerada', models.BooleanField(default=False)),
                ('zona_sombra', models.BooleanField(default=False)),
                ('wifi_disponible', models.BooleanField(default=False)),
                ('espacio_infantil', models.BooleanField(default=False)),
                ('num_vistas', models.PositiveIntegerField(default=0)),
                ('num_favoritos', models.PositiveIntegerField(default=0)),
                ('num_reservas', models.PositiveIntegerField(default=0)),
            ],
        ),
        migrations.CreateModel(
            name='Idioma',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nombre', models.CharField(max_length=50)),
            ],
        ),
        migrations.CreateModel(
            name='ServicioClub',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nombre', models.CharField(max_length=50)),
            ],
        ),
        migrations.CreateModel(
            name='TagClub',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nombre', models.CharField(max_length=30, unique=True)),
            ],
        ),
        migrations.CreateModel(
            name='TipoSuperficie',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nombre', models.CharField(max_length=50)),
            ],
        ),
        migrations.CreateModel(
            name='TrainingSession',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateField()),
                ('details', models.TextField()),
                ('teacher_comment', models.TextField(blank=True, null=True)),
                ('session_type', models.CharField(blank=True, max_length=50, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('alumno', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='training_sessions', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Sesión de Entrenamiento',
                'verbose_name_plural': 'Sesiones de Entrenamiento',
                'ordering': ['-date'],
            },
        ),
        migrations.CreateModel(
            name='TarifaFranja',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('dia_semana', models.IntegerField(choices=[(0, 0), (1, 1), (2, 2), (3, 3), (4, 4), (5, 5), (6, 6)])),
                ('hora_inicio', models.TimeField()),
                ('hora_fin', models.TimeField()),
                ('precio', models.DecimalField(decimal_places=2, max_digits=6)),
                ('club', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='reservas.club')),
            ],
        ),
        migrations.CreateModel(
            name='ReviewClub',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('rating', models.PositiveIntegerField()),
                ('comentario', models.TextField(blank=True)),
                ('fecha', models.DateTimeField(auto_now_add=True)),
                ('categorias', models.ManyToManyField(blank=True, to='reservas.categoriareview')),
                ('club', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='reviews', to='reservas.club')),
                ('usuario', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='ResumenReviewIA',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('resumen_positivo', models.TextField(blank=True)),
                ('resumen_negativo', models.TextField(blank=True)),
                ('actualizado', models.DateTimeField(auto_now=True)),
                ('club', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='resumen_reviews', to='reservas.club')),
            ],
        ),
        migrations.CreateModel(
            name='Reserva',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('estado', models.CharField(choices=[('pendiente', 'Pendiente'), ('confirmada', 'Confirmada'), ('cancelada', 'Cancelada'), ('realizada', 'Realizada')], max_length=20)),
                ('fecha_reserva', models.DateTimeField(auto_now_add=True)),
                ('tipo_reserva', models.CharField(choices=[('individual', 'Individual'), ('pareja', 'Pareja'), ('grupal', 'Grupal')], default='individual', max_length=15)),
                ('hora_inicio', models.DateTimeField(default=django.utils.timezone.now)),
                ('hora_final', models.DateTimeField(blank=True, null=True)),
                ('alumno', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='reservas_alumno', to=settings.AUTH_USER_MODEL)),
                ('clase', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='reservas.clase')),
            ],
        ),
        migrations.CreateModel(
            name='RecursoAlumno',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('titulo', models.CharField(max_length=255)),
                ('comentarios', models.TextField(blank=True, null=True)),
                ('url', models.URLField()),
                ('thumbnail', models.URLField(blank=True, null=True)),
                ('fecha_asignacion', models.DateTimeField(auto_now_add=True)),
                ('alumno', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='recursos_personalizados', to=settings.AUTH_USER_MODEL)),
                ('asignado_por', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='recursos_asignados', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Recurso asignado',
                'verbose_name_plural': 'Recursos asignados',
                'ordering': ['-fecha_asignacion'],
            },
        ),
        migrations.CreateModel(
            name='RankingClub',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('provincia', models.CharField(max_length=100)),
                ('region', models.CharField(blank=True, max_length=100)),
                ('puntuacion_total', models.FloatField(default=0)),
                ('posicion', models.PositiveIntegerField(default=0)),
                ('ultima_actualizacion', models.DateTimeField(auto_now=True)),
                ('club', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='ranking', to='reservas.club')),
            ],
        ),
        migrations.CreateModel(
            name='PushToken',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('token', models.CharField(max_length=200)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='PromocionClub',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('titulo', models.CharField(max_length=100)),
                ('descripcion', models.TextField()),
                ('fecha_inicio', models.DateTimeField()),
                ('fecha_fin', models.DateTimeField()),
                ('activa', models.BooleanField(default=True)),
                ('club', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='promociones', to='reservas.club')),
            ],
        ),
        migrations.CreateModel(
            name='PrediccionOcupacion',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('fecha', models.DateField()),
                ('ocupacion_esperada', models.FloatField()),
                ('factor_clima', models.FloatField()),
                ('factor_festivo', models.FloatField()),
                ('generado_en', models.DateTimeField(auto_now_add=True)),
                ('club', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='reservas.club')),
            ],
        ),
        migrations.CreateModel(
            name='Pozo',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('titulo', models.CharField(blank=True, max_length=100, verbose_name='Título del Pozo')),
                ('fecha', models.DateField()),
                ('hora_inicio', models.TimeField()),
                ('hora_fin', models.TimeField()),
                ('tipo', models.CharField(choices=[('mixto', 'Mixto'), ('parejas', 'Por Parejas'), ('hombres', 'Solo Hombres'), ('mujeres', 'Solo Mujeres')], max_length=10)),
                ('num_pistas', models.PositiveIntegerField(default=8)),
                ('creado_por', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Pista',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nombre', models.CharField(max_length=100)),
                ('indoor', models.BooleanField(default=False)),
                ('cubierta_exterior', models.BooleanField(default=False)),
                ('abierta', models.BooleanField(default=False)),
                ('es_1vs1', models.BooleanField(default=False)),
                ('es_competicion', models.BooleanField(default=False)),
                ('iluminacion_nocturna', models.BooleanField(default=False)),
                ('accesible_minusvalidos', models.BooleanField(default=False)),
                ('club', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='pistas', to='reservas.club')),
                ('superficie', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='reservas.tiposuperficie')),
            ],
        ),
        migrations.CreateModel(
            name='PerfilEstiloJugador',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('estilo', models.CharField(max_length=50)),
                ('nivel', models.CharField(max_length=20)),
                ('frecuencia_juego', models.CharField(max_length=20)),
                ('clubes_favoritos', models.ManyToManyField(blank=True, to='reservas.club')),
                ('usuario', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='PartnershipClub',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nombre_empresa', models.CharField(max_length=100)),
                ('enlace', models.URLField(blank=True)),
                ('descripcion', models.TextField(blank=True)),
                ('logo', models.ImageField(blank=True, null=True, upload_to='clubes/partners/')),
                ('club', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='partnerships', to='reservas.club')),
            ],
        ),
        migrations.CreateModel(
            name='ParticipantePozo',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nombre', models.CharField(max_length=100)),
                ('nivel', models.FloatField()),
                ('genero', models.CharField(choices=[('hombre', 'Hombre'), ('mujer', 'Mujer')], max_length=10)),
                ('pista_fija', models.PositiveIntegerField(blank=True, null=True)),
                ('mano_dominante', models.CharField(choices=[('diestro', 'Diestro'), ('zurdo', 'Zurdo')], default='diestro', max_length=10)),
                ('posicion', models.CharField(choices=[('reves', 'Reves'), ('drive', 'Drive'), ('ambos', 'Ambos')], default='ambos', max_length=10)),
                ('es_organizador', models.BooleanField(default=False)),
                ('juega_con', models.ManyToManyField(blank=True, related_name='es_pareja_de', to='reservas.participantepozo')),
                ('juega_contra', models.ManyToManyField(blank=True, related_name='es_rival_de', to='reservas.participantepozo')),
                ('no_juega_con', models.ManyToManyField(blank=True, related_name='no_debe_jugar_con', to='reservas.participantepozo')),
                ('no_juega_contra', models.ManyToManyField(blank=True, related_name='no_debe_jugar_contra', to='reservas.participantepozo')),
                ('pozo', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='participantes', to='reservas.pozo')),
                ('usuario', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Notificacion',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('titulo', models.CharField(max_length=255)),
                ('cuerpo', models.TextField()),
                ('tipo', models.CharField(blank=True, max_length=50, null=True)),
                ('leida', models.BooleanField(default=False)),
                ('fecha', models.DateTimeField(auto_now_add=True)),
                ('extra', models.JSONField(blank=True, null=True)),
                ('usuario', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='notificaciones', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='MapaCalorClub',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('dia_semana', models.IntegerField()),
                ('hora', models.TimeField()),
                ('intensidad', models.IntegerField()),
                ('club', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='reservas.club')),
            ],
        ),
        migrations.CreateModel(
            name='LogroClub',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('titulo', models.CharField(max_length=100)),
                ('descripcion', models.TextField(blank=True)),
                ('icono', models.ImageField(blank=True, null=True, upload_to='clubes/logros/')),
                ('fecha_otorgado', models.DateField(auto_now_add=True)),
                ('club', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='logros', to='reservas.club')),
            ],
        ),
        migrations.CreateModel(
            name='JugadorPozo',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nombre', models.CharField(max_length=100)),
                ('nivel', models.PositiveIntegerField()),
                ('registrado', models.BooleanField(default=False)),
                ('afinidades_negativas', models.ManyToManyField(blank=True, related_name='afinidades_negativas_de', to='reservas.jugadorpozo')),
                ('afinidades_positivas', models.ManyToManyField(blank=True, related_name='afinidades_positivas_de', to='reservas.jugadorpozo')),
                ('pozo', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='jugadores', to='reservas.pozo')),
            ],
        ),
        migrations.CreateModel(
            name='IncidenciaPista',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('descripcion', models.TextField()),
                ('fecha_inicio', models.DateTimeField()),
                ('fecha_fin', models.DateTimeField(blank=True, null=True)),
                ('estado', models.CharField(choices=[('abierta', 'Abierta'), ('cerrada', 'Cerrada temporalmente')], max_length=20)),
                ('pista', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='reservas.pista')),
            ],
        ),
        migrations.CreateModel(
            name='HistorialClubUsuario',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('tipo_evento', models.CharField(choices=[('reserva', 'Reserva'), ('torneo', 'Torneo'), ('entrenamiento', 'Entrenamiento')], max_length=30)),
                ('fecha', models.DateTimeField(auto_now_add=True)),
                ('descripcion', models.TextField(blank=True)),
                ('club', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='reservas.club')),
                ('usuario', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='EventoClub',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nombre', models.CharField(max_length=100)),
                ('descripcion', models.TextField()),
                ('fecha_inicio', models.DateTimeField()),
                ('fecha_fin', models.DateTimeField()),
                ('publico', models.BooleanField(default=True)),
                ('club', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='eventos', to='reservas.club')),
            ],
        ),
        migrations.CreateModel(
            name='ClubUsuarioRelacion',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('tipo_relacion', models.CharField(choices=[('favorito', 'Favorito'), ('socio', 'Socio'), ('entrenador', 'Entrenador'), ('administrador', 'Administrador'), ('colaborador', 'Colaborador')], max_length=20)),
                ('fecha', models.DateTimeField(auto_now_add=True)),
                ('club', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='reservas.club')),
                ('usuario', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='ClubServicio',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('club', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='servicios', to='reservas.club')),
                ('servicio', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='reservas.servicioclub')),
            ],
        ),
        migrations.CreateModel(
            name='ClubImagen',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('imagen', models.ImageField(upload_to='clubes/imagenes/')),
                ('descripcion', models.CharField(blank=True, max_length=100)),
                ('orden', models.PositiveIntegerField(default=0)),
                ('club', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='imagenes', to='reservas.club')),
            ],
        ),
        migrations.CreateModel(
            name='ClubHorario',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('dia_semana', models.IntegerField(choices=[(0, 0), (1, 1), (2, 2), (3, 3), (4, 4), (5, 5), (6, 6)])),
                ('apertura', models.TimeField()),
                ('cierre', models.TimeField()),
                ('club', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='horarios', to='reservas.club')),
            ],
        ),
        migrations.AddField(
            model_name='club',
            name='idioma_principal',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='idioma_principal_clubes', to='reservas.idioma'),
        ),
        migrations.AddField(
            model_name='club',
            name='idiomas',
            field=models.ManyToManyField(blank=True, related_name='clubes', to='reservas.idioma'),
        ),
        migrations.AddField(
            model_name='club',
            name='tags',
            field=models.ManyToManyField(blank=True, to='reservas.tagclub'),
        ),
        migrations.CreateModel(
            name='AlumnoPerfilEvolucion',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('fecha', models.DateTimeField(auto_now_add=True)),
                ('stats', models.JSONField()),
                ('perfil', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='evoluciones', to='reservas.alumnoperfil')),
            ],
            options={
                'ordering': ['-fecha'],
            },
        ),
        migrations.AddField(
            model_name='alumnoperfil',
            name='caracteristicas',
            field=models.ManyToManyField(blank=True, related_name='perfiles', to='reservas.caracteristica'),
        ),
        migrations.AddField(
            model_name='alumnoperfil',
            name='usuario',
            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL),
        ),
        migrations.CreateModel(
            name='Afinidad',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('tipo', models.CharField(choices=[('evitar', 'Evitar totalmente'), ('evitar_pareja', 'Evitar como pareja'), ('evitar_rival', 'Evitar como rival')], max_length=20)),
                ('con_participante', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='evitado_por', to='reservas.participantepozo')),
                ('participante', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='afinidades', to='reservas.participantepozo')),
            ],
        ),
        migrations.CreateModel(
            name='Amistad',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('estado', models.CharField(choices=[('pendiente', 'Pendiente'), ('aceptada', 'Aceptada'), ('bloqueada', 'Bloqueada')], default='pendiente', max_length=10)),
                ('fecha_solicitud', models.DateTimeField(auto_now_add=True)),
                ('a_usuario', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='amistades_recibidas', to=settings.AUTH_USER_MODEL)),
                ('de_usuario', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='amistades_enviadas', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Amistad',
                'verbose_name_plural': 'Amistades',
                'unique_together': {('de_usuario', 'a_usuario')},
            },
        ),
    ]
