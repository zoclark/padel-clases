"""
Django settings for backend project.

Generated by 'django-admin startproject' using Django 4.2.20.
"""

import os
from pathlib import Path
import dj_database_url
from dotenv import load_dotenv, dotenv_values

# BASE_DIR
BASE_DIR = Path(__file__).resolve().parent.parent

# Cargar primero .env.local por defecto
env_path = BASE_DIR / ".env.local"

# Miramos si .env.production tiene ENV=production y lo usamos si existe
production_env = dotenv_values(BASE_DIR / ".env.production")
print(f"[DEBUG] Cargando env desde: {env_path}")
print("[DEBUG] Contenido de .env.production:", production_env)
if production_env.get("ENV", "").lower() == "production":
    env_path = BASE_DIR / ".env.production"

# Finalmente, cargamos el .env seleccionado
load_dotenv(dotenv_path=env_path)
print(f"DEBUG tras cargar dotenv ({env_path}): {os.getenv('DEBUG')}")
# Para garantizar que se use lo del .env (y no el sistema)
print(f"[RENDER desde .env]: {dotenv_values(env_path).get('RENDER')}")
print(f"[RENDER real usado]: {os.getenv('RENDER')}")
# Imprimir los valores de las variables cargadas para verificar
print(f"ENV: {os.getenv('ENV')}")
print(f"DEBUG: {os.getenv('DEBUG')}")
print(f"RENDER: {os.getenv('RENDER')}")

# === ENTORNO ===
ENVIRONMENT = os.getenv("ENV", "local").lower()
USE_STATIC_FRONTEND = ENVIRONMENT == "production"  # Usa el build estático solo en producción


# === CONFIGURACIÓN GENERAL ===
SECRET_KEY = os.getenv("SECRET_KEY", "clave-insegura-por-defecto")
# DEBUG debe usar el valor cargado desde dotenv, no desde el entorno global
DEBUG = os.environ.get("DEBUG", "False").lower() in ("true", "1", "yes")
print(f"[DEBUG FINAL]: {DEBUG}")
ALLOWED_HOSTS = os.getenv("ALLOWED_HOSTS", "*").split(",")
# Imprimir el valor de DEBUG para verificar su configuración
print(f"DEBUG: {DEBUG}")  # Esto te ayudará a ver si el valor de DEBUG se establece correctamente
# Imprimir los valores de las variables cargadas para verificar
print(f"ENV: {os.getenv('ENV')}")
print(f"DEBUG: {os.getenv('DEBUG')}")
print(f"RENDER: {os.getenv('RENDER')}")

# === APLICACIONES ===
INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'corsheaders',
    'rest_framework',
    'reservas',
]

# === MIDDLEWARE ===
MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "corsheaders.middleware.CorsMiddleware",
    "whitenoise.middleware.WhiteNoiseMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    # "django.middleware.csrf.CsrfViewMiddleware",  # Descomentarlo si usas formularios HTML
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

# === JWT y API ===
REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'rest_framework_simplejwt.authentication.JWTAuthentication',
    ),
    'DEFAULT_PERMISSION_CLASSES': (
        'rest_framework.permissions.AllowAny',
    ),
}

# === RUTAS Y WSGI ===
ROOT_URLCONF = 'backend.urls'
WSGI_APPLICATION = 'backend.wsgi.application'

# === TEMPLATES ===
TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

# === BASE DE DATOS ===
if ENVIRONMENT == "production" and os.getenv("DATABASE_URL"):
    # En producción, cuando DATABASE_URL está definida (por ejemplo, en Render)
    DATABASES = {
        'default': dj_database_url.config(conn_max_age=600, ssl_require=True)
    }
else:
    # Para local-local o local-production (simulando producción pero sin DATABASE_URL)
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.postgresql',
            'NAME': 'padel_db',
            'USER': 'zoclark',
            'PASSWORD': 'no123123carlos',
            'HOST': 'localhost',
            'PORT': '5432',
        }
    }

# === VALIDADORES DE CONTRASEÑAS ===
AUTH_PASSWORD_VALIDATORS = [
    {'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator'},
    {'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator'},
    {'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator'},
    {'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator'},
]

# === INTERNACIONALIZACIÓN ===
LANGUAGE_CODE = 'en-us'
TIME_ZONE = 'UTC'
USE_I18N = True
USE_TZ = True

# === ARCHIVOS ESTÁTICOS ===
STATIC_URL = '/static/'
STATICFILES_DIRS = [BASE_DIR / 'backend' / 'staticfiles']
STATIC_ROOT = BASE_DIR / 'backend' / 'staticfiles_root'
STATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage'

# === CONFIGURACIÓN EXTRA ===
DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'
AUTH_USER_MODEL = 'reservas.Usuario'
CORS_ALLOW_ALL_ORIGINS = True  # apertura total
CSRF_COOKIE_SECURE = True

# Permitir acceso desde React dev o Render frontend
CORS_ALLOWED_ORIGINS = [
    'http://127.0.0.1:8000',
    'https://padel-clases.onrender.com',
]
